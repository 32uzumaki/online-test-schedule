=PY(
"
import pandas as pd

# 1) テーブルを DataFrame 化
df = pd.DataFrame(xl('MyTable'))

# もしテーブルの列が
#   A列=Date, B列=SubBE, C列=EPI, D列=WP表, E列=WP裏
# という順番で入っているなら、df.columns は ["Date", "SubBE", "EPI", "WP表", "WP裏"] となります。
# 念のため確認:
# df.columns -> Index(['Date', 'SubBE', 'EPI', 'WP表', 'WP裏'], dtype='object')

# 日付列を datetime64 に変換
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')

# 日付が欠損した行は除去し、日付順で並べ替え
df = df.dropna(subset=['Date']).sort_values('Date').reset_index(drop=True)

# ----------------------------------------------------------------------------
# 2) 累計 -> 差分(増分)に変換
# ----------------------------------------------------------------------------
priority_order = ['SubBE','EPI','WP表','WP裏']

df_diff = df.copy()
for i in range(len(df_diff)):
    if i == 0:
        # 初月はそのまま (前月がないため)
        continue
    else:
        for col in priority_order:
            df_diff.loc[i, col] = df.loc[i, col] - df.loc[i-1, col]

# ----------------------------------------------------------------------------
# 3) テストシミュレーション
# ----------------------------------------------------------------------------
MAX_PER_MONTH = 3  # 1か月あたり最大3台
backlog = {p: 0 for p in priority_order}
results = []

idx = 0
max_idx = len(df_diff)
current_date = df_diff.loc[0, 'Date']

while True:
    date_key = current_date.normalize()

    # (a) 当月の新規増分をバックログに
    if idx < max_idx:
        row_date = df_diff.loc[idx, 'Date'].normalize()
        if row_date == date_key:
            for p in priority_order:
                backlog[p] += df_diff.loc[idx, p]
            idx += 1

    # (b) 優先度順に最大3台テスト
    remaining = MAX_PER_MONTH
    tested = {p: 0 for p in priority_order}
    for p in priority_order:
        if backlog[p] > 0 and remaining > 0:
            can_test = min(backlog[p], remaining)
            tested[p] = can_test
            backlog[p] -= can_test
            remaining -= can_test

    # (c) 今月の結果を保存
    row_result = {
        'Month': date_key.strftime('%Y-%m-%d')
    }
    for p in priority_order:
        row_result[f'Tested_{p}'] = tested[p]
    for p in priority_order:
        row_result[f'Backlog_{p}'] = backlog[p]
    results.append(row_result)

    # (d) バックログが0 & 差分取り込み終了ならループ終わり
    if all(backlog[p] == 0 for p in priority_order) and (idx >= max_idx):
        break

    # (e) 翌月1日に進む
    y = current_date.year
    m = current_date.month
    if m == 12:
        y += 1
        m = 1
    else:
        m += 1
    current_date = pd.Timestamp(y, m, 1)

# ----------------------------------------------------------------------------
# 4) 結果を DataFrame で返す
# ----------------------------------------------------------------------------
df_results = pd.DataFrame(results)
df_results
"
)

let
    // ① Excelのテーブルを読み込む
    Source = Excel.CurrentWorkbook(){[Name="MyTable"]}[Content],

    // ② 「増設機」列が「◯」の行だけを抽出
    FilteredData = Table.SelectRows(Source, each Text.Trim([増設機]) = "◯"),

    // ③ 日付を Date型に変換し、昇順ソート（優先度も考慮）
    SortedData = Table.Sort(FilteredData, {{"Date", Order.Ascending}, {"SubBE", Order.Descending}, {"EPI", Order.Descending}, {"WP表", Order.Descending}, {"WP裏", Order.Descending}}),

    // ④ 各月のテスト上限 (15台) を考慮しながら、実際のテスト実施月を割り当てる
    AddTestMonth = Table.AddColumn(SortedData, "TestMonth", each null, type date),

    // ⑤ 各行のテスト実施月を決定する関数
    AssignTestMonth = (table as table) =>
        let
            MaxPerMonth = 15,  // 月ごとの最大テスト数
            TestQueue = List.Buffer(Table.ToRecords(table)),  // 全データをリスト化してバッファに保持
            Result = List.Accumulate(TestQueue, [], (acc, current) =>
                let
                    // すでに実施済みの月ごとのカウント
                    CurrentMonth = Date.StartOfMonth(current[Date]),
                    ExistingCount = List.Count(List.Select(acc, each _[TestMonth] = CurrentMonth)),
                    
                    // もし今月のテスト台数が上限未満なら、現在の月で実施
                    NewTestMonth = if ExistingCount < MaxPerMonth then CurrentMonth
                                   else List.Max(List.Transform(acc, each _[TestMonth])) + #duration(30,0,0,0), // 翌月繰越
                    NewRecord = Record.AddField(current, "TestMonth", NewTestMonth)
                in
                    acc & {NewRecord}
            )
        in
            Table.FromRecords(Result),

    // ⑥ 実際のテスト実施月を適用
    FinalTable = AssignTestMonth(AddTestMonth)

in
    FinalTable